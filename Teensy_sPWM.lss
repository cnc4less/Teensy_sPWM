
Teensy_sPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f46  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000020a  00800100  00800100  00000fba  2**0
                  ALLOC
  2 .stab         00001c20  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000002dc  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000108  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000019a  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e51  00000000  00000000  0000315a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000568  00000000  00000000  00003fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f3c  00000000  00000000  00004513  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00005450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  000055e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f2  00000000  00000000  00005a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000062fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   0:	b8 c0       	rjmp	.+368    	; 0x172 <__ctors_end>
}

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
   2:	00 00       	nop
   4:	d1 c0       	rjmp	.+418    	; 0x1a8 <__bad_interrupt>
   6:	00 00       	nop
   8:	cf c0       	rjmp	.+414    	; 0x1a8 <__bad_interrupt>
   a:	00 00       	nop
   c:	cd c0       	rjmp	.+410    	; 0x1a8 <__bad_interrupt>
   e:	00 00       	nop
  10:	cb c0       	rjmp	.+406    	; 0x1a8 <__bad_interrupt>
  12:	00 00       	nop
  14:	c9 c0       	rjmp	.+402    	; 0x1a8 <__bad_interrupt>
  16:	00 00       	nop
  18:	c7 c0       	rjmp	.+398    	; 0x1a8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c5 c0       	rjmp	.+394    	; 0x1a8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c3 c0       	rjmp	.+390    	; 0x1a8 <__bad_interrupt>
  22:	00 00       	nop
  24:	c1 c0       	rjmp	.+386    	; 0x1a8 <__bad_interrupt>
  26:	00 00       	nop
  28:	fc c3       	rjmp	.+2040   	; 0x822 <__vector_10>
  2a:	00 00       	nop
  2c:	3a c4       	rjmp	.+2164   	; 0x8a2 <__vector_11>
  2e:	00 00       	nop
  30:	bb c0       	rjmp	.+374    	; 0x1a8 <__bad_interrupt>
  32:	00 00       	nop
  34:	b9 c0       	rjmp	.+370    	; 0x1a8 <__bad_interrupt>
  36:	00 00       	nop
  38:	b7 c0       	rjmp	.+366    	; 0x1a8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b5 c0       	rjmp	.+362    	; 0x1a8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b3 c0       	rjmp	.+358    	; 0x1a8 <__bad_interrupt>
  42:	00 00       	nop
  44:	b1 c0       	rjmp	.+354    	; 0x1a8 <__bad_interrupt>
  46:	00 00       	nop
  48:	af c0       	rjmp	.+350    	; 0x1a8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ad c0       	rjmp	.+346    	; 0x1a8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	ab c0       	rjmp	.+342    	; 0x1a8 <__bad_interrupt>
  52:	00 00       	nop
  54:	a9 c0       	rjmp	.+338    	; 0x1a8 <__bad_interrupt>
  56:	00 00       	nop
  58:	a7 c0       	rjmp	.+334    	; 0x1a8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b7 c2       	rjmp	.+1390   	; 0x5cc <__vector_23>
  5e:	00 00       	nop
  60:	a3 c0       	rjmp	.+326    	; 0x1a8 <__bad_interrupt>
  62:	00 00       	nop
  64:	a1 c0       	rjmp	.+322    	; 0x1a8 <__bad_interrupt>
  66:	00 00       	nop
  68:	9f c0       	rjmp	.+318    	; 0x1a8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9d c0       	rjmp	.+314    	; 0x1a8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	9b c0       	rjmp	.+310    	; 0x1a8 <__bad_interrupt>
  72:	00 00       	nop
  74:	99 c0       	rjmp	.+306    	; 0x1a8 <__bad_interrupt>
  76:	00 00       	nop
  78:	97 c0       	rjmp	.+302    	; 0x1a8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	95 c0       	rjmp	.+298    	; 0x1a8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	93 c0       	rjmp	.+294    	; 0x1a8 <__bad_interrupt>
  82:	00 00       	nop
  84:	91 c0       	rjmp	.+290    	; 0x1a8 <__bad_interrupt>
  86:	00 00       	nop
  88:	8f c0       	rjmp	.+286    	; 0x1a8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8d c0       	rjmp	.+282    	; 0x1a8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	8b c0       	rjmp	.+278    	; 0x1a8 <__bad_interrupt>
  92:	00 00       	nop
  94:	89 c0       	rjmp	.+274    	; 0x1a8 <__bad_interrupt>
  96:	00 00       	nop
  98:	87 c0       	rjmp	.+270    	; 0x1a8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	85 c0       	rjmp	.+266    	; 0x1a8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	83 c0       	rjmp	.+262    	; 0x1a8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	81 c0       	rjmp	.+258    	; 0x1a8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7f c0       	rjmp	.+254    	; 0x1a8 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__c.1841>:
  ac:	53 65 74 20 70 69 6e 21 00                          Set pin!.

000000b5 <descriptor_list>:
  b5:	00 01 00 00 ec 00 12 00 02 00 00 fe 00 22 00 22     ............."."
  c5:	00 00 20 01 15 00 21 00 00 10 01 09 00 03 00 00     .. ...!.........
  d5:	35 01 04 01 03 09 04 39 01 14 02 03 09 04 4f 01     5......9......O.
  e5:	20                                                   

000000e6 <endpoint_config_table>:
  e6:	00 00 01 c1 26 00                                   ....&.

000000ec <device_descriptor>:
  ec:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
  fc:	00 01                                               ..

000000fe <config1_descriptor>:
  fe:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 10e:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 11e:	00 01                                               ..

00000120 <hid_report_descriptor>:
 120:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 130:	09 75 81 02 c0                                      .u...

00000135 <string0>:
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 149:	6d 00 65 00 00 00                                   m.e...

0000014f <string2>:
 14f:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
 15f:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
 16f:	00 00 00                                            ...

00000172 <__ctors_end>:
 172:	11 24       	eor	r1, r1
 174:	1f be       	out	0x3f, r1	; 63
 176:	cf ef       	ldi	r28, 0xFF	; 255
 178:	da e0       	ldi	r29, 0x0A	; 10
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	cd bf       	out	0x3d, r28	; 61

0000017e <__do_copy_data>:
 17e:	11 e0       	ldi	r17, 0x01	; 1
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	e6 e4       	ldi	r30, 0x46	; 70
 186:	ff e0       	ldi	r31, 0x0F	; 15
 188:	02 c0       	rjmp	.+4      	; 0x18e <.do_copy_data_start>

0000018a <.do_copy_data_loop>:
 18a:	05 90       	lpm	r0, Z+
 18c:	0d 92       	st	X+, r0

0000018e <.do_copy_data_start>:
 18e:	a0 30       	cpi	r26, 0x00	; 0
 190:	b1 07       	cpc	r27, r17
 192:	d9 f7       	brne	.-10     	; 0x18a <.do_copy_data_loop>

00000194 <__do_clear_bss>:
 194:	13 e0       	ldi	r17, 0x03	; 3
 196:	a0 e0       	ldi	r26, 0x00	; 0
 198:	b1 e0       	ldi	r27, 0x01	; 1
 19a:	01 c0       	rjmp	.+2      	; 0x19e <.do_clear_bss_start>

0000019c <.do_clear_bss_loop>:
 19c:	1d 92       	st	X+, r1

0000019e <.do_clear_bss_start>:
 19e:	aa 30       	cpi	r26, 0x0A	; 10
 1a0:	b1 07       	cpc	r27, r17
 1a2:	e1 f7       	brne	.-8      	; 0x19c <.do_clear_bss_loop>
 1a4:	f8 d1       	rcall	.+1008   	; 0x596 <main>
 1a6:	cd c6       	rjmp	.+3482   	; 0xf42 <_exit>

000001a8 <__bad_interrupt>:
 1a8:	2b cf       	rjmp	.-426    	; 0x0 <__vectors>

000001aa <set_pin>:
static int set_pin(char charport, uint8_t pin, uint8_t val)
{
	uint8_t port = 0;

	//check for invalid values, return 0 if they are invalid.
	if (charport < 'A' || charport > 'F')
 1aa:	81 54       	subi	r24, 0x41	; 65
 1ac:	86 30       	cpi	r24, 0x06	; 6
 1ae:	50 f5       	brcc	.+84     	; 0x204 <set_pin+0x5a>
		return 0;
	
	if (pin < 0 || pin > 7)
 1b0:	68 30       	cpi	r22, 0x08	; 8
 1b2:	40 f5       	brcc	.+80     	; 0x204 <set_pin+0x5a>
		return 0; 
		
	port = charport - 'A';
	
	//set the pin
	if (val == 0)
 1b4:	44 23       	and	r20, r20
 1b6:	91 f4       	brne	.+36     	; 0x1dc <set_pin+0x32>
	{
		// make the pin an output
		*(uint8_t *)(0x21 + port * 3) |= (1 << pin);
 1b8:	e3 e0       	ldi	r30, 0x03	; 3
 1ba:	8e 9f       	mul	r24, r30
 1bc:	f0 01       	movw	r30, r0
 1be:	11 24       	eor	r1, r1
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <set_pin+0x20>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <set_pin+0x1c>
 1ce:	21 a1       	ldd	r18, Z+33	; 0x21
 1d0:	28 2b       	or	r18, r24
 1d2:	21 a3       	std	Z+33, r18	; 0x21
		// drive it low
		*(uint8_t *)(0x22 + port * 3) &= ~(1 << pin);
 1d4:	80 95       	com	r24
 1d6:	22 a1       	ldd	r18, Z+34	; 0x22
 1d8:	28 23       	and	r18, r24
 1da:	10 c0       	rjmp	.+32     	; 0x1fc <set_pin+0x52>
	}
	else
	{
		// make the pin an output
		*(uint8_t *)(0x21 + port * 3) |= (1 << pin);
 1dc:	e3 e0       	ldi	r30, 0x03	; 3
 1de:	8e 9f       	mul	r24, r30
 1e0:	f0 01       	movw	r30, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <set_pin+0x44>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <set_pin+0x40>
 1f2:	21 a1       	ldd	r18, Z+33	; 0x21
 1f4:	28 2b       	or	r18, r24
 1f6:	21 a3       	std	Z+33, r18	; 0x21
		// drive it high
		*(uint8_t *)(0x22 + port * 3) |= (1 << pin);
 1f8:	22 a1       	ldd	r18, Z+34	; 0x22
 1fa:	28 2b       	or	r18, r24
 1fc:	22 a3       	std	Z+34, r18	; 0x22
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <set_pin+0x5e>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	return 1;
}
 208:	c9 01       	movw	r24, r18
 20a:	08 95       	ret

0000020c <set_abstract_pin_PWM>:
		}
	}
}

int set_abstract_pin_PWM(uint8_t pin, uint8_t pwmPercent)
{
 20c:	6f 92       	push	r6
 20e:	7f 92       	push	r7
 210:	9f 92       	push	r9
 212:	af 92       	push	r10
 214:	bf 92       	push	r11
 216:	cf 92       	push	r12
 218:	df 92       	push	r13
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	96 2e       	mov	r9, r22
	if (pwmPercent < 0 || pwmPercent > 100)
 228:	94 e6       	ldi	r25, 0x64	; 100
 22a:	96 17       	cp	r25, r22
 22c:	18 f4       	brcc	.+6      	; 0x234 <set_abstract_pin_PWM+0x28>
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	58 c0       	rjmp	.+176    	; 0x2e4 <set_abstract_pin_PWM+0xd8>
		return 0; //invalid percentage yo!

	teensyPin[pin].pwmPercent = pwmPercent;
 234:	68 2e       	mov	r6, r24
 236:	77 24       	eor	r7, r7
 238:	83 e1       	ldi	r24, 0x13	; 19
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	68 9e       	mul	r6, r24
 23e:	e0 01       	movw	r28, r0
 240:	69 9e       	mul	r6, r25
 242:	d0 0d       	add	r29, r0
 244:	78 9e       	mul	r7, r24
 246:	d0 0d       	add	r29, r0
 248:	11 24       	eor	r1, r1
 24a:	c0 5f       	subi	r28, 0xF0	; 240
 24c:	de 4f       	sbci	r29, 0xFE	; 254
 24e:	6a 83       	std	Y+2, r22	; 0x02
	/*TODO: using a float here because it's easier for now. Do maths and use 
	ints later because they're faster. */
	float pwmDec;
	pwmDec = (float)pwmPercent / 100;
	
	teensyPin[pin].usOn = usPulseLength * pwmDec;
 250:	e0 90 00 01 	lds	r14, 0x0100
 254:	f0 90 01 01 	lds	r15, 0x0101
 258:	00 91 02 01 	lds	r16, 0x0102
 25c:	10 91 03 01 	lds	r17, 0x0103
 260:	c8 01       	movw	r24, r16
 262:	b7 01       	movw	r22, r14
 264:	40 d5       	rcall	.+2688   	; 0xce6 <__floatunsisf>
 266:	5b 01       	movw	r10, r22
 268:	6c 01       	movw	r12, r24
 26a:	69 2d       	mov	r22, r9
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	39 d5       	rcall	.+2674   	; 0xce6 <__floatunsisf>
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	48 ec       	ldi	r20, 0xC8	; 200
 27a:	52 e4       	ldi	r21, 0x42	; 66
 27c:	9b d4       	rcall	.+2358   	; 0xbb4 <__divsf3>
 27e:	9b 01       	movw	r18, r22
 280:	ac 01       	movw	r20, r24
 282:	c6 01       	movw	r24, r12
 284:	b5 01       	movw	r22, r10
 286:	bd d5       	rcall	.+2938   	; 0xe02 <__mulsf3>
 288:	fd d4       	rcall	.+2554   	; 0xc84 <__fixsfsi>
 28a:	6b 83       	std	Y+3, r22	; 0x03
 28c:	7c 83       	std	Y+4, r23	; 0x04
 28e:	8d 83       	std	Y+5, r24	; 0x05
 290:	9e 83       	std	Y+6, r25	; 0x06
	teensyPin[pin].usOff = usPulseLength - teensyPin[pin].usOn;
 292:	e6 1a       	sub	r14, r22
 294:	f7 0a       	sbc	r15, r23
 296:	08 0b       	sbc	r16, r24
 298:	19 0b       	sbc	r17, r25
 29a:	ef 82       	std	Y+7, r14	; 0x07
 29c:	f8 86       	std	Y+8, r15	; 0x08
 29e:	09 87       	std	Y+9, r16	; 0x09
 2a0:	1a 87       	std	Y+10, r17	; 0x0a
	teensyPin[pin].usOnRemaining = teensyPin[pin].usOn;
 2a2:	6b 87       	std	Y+11, r22	; 0x0b
 2a4:	7c 87       	std	Y+12, r23	; 0x0c
 2a6:	8d 87       	std	Y+13, r24	; 0x0d
 2a8:	9e 87       	std	Y+14, r25	; 0x0e
	teensyPin[pin].usOffRemaining = teensyPin[pin].usOff;
 2aa:	ef 86       	std	Y+15, r14	; 0x0f
 2ac:	f8 8a       	std	Y+16, r15	; 0x10
 2ae:	09 8b       	std	Y+17, r16	; 0x11
 2b0:	1a 8b       	std	Y+18, r17	; 0x12
	
	if (pwmPercent == 0)
 2b2:	99 20       	and	r9, r9
 2b4:	21 f4       	brne	.+8      	; 0x2be <set_abstract_pin_PWM+0xb2>
		set_pin(teensyPin[pin].port, teensyPin[pin].pin, 0);
 2b6:	88 81       	ld	r24, Y
 2b8:	69 81       	ldd	r22, Y+1	; 0x01
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	76 df       	rcall	.-276    	; 0x1aa <set_pin>
		
	print("Set pin!");
 2be:	8c ea       	ldi	r24, 0xAC	; 172
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	64 d4       	rcall	.+2248   	; 0xb8c <print_P>
	phex16(teensyPin[pin].usOn);
 2c4:	83 e1       	ldi	r24, 0x13	; 19
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	68 9e       	mul	r6, r24
 2ca:	f0 01       	movw	r30, r0
 2cc:	69 9e       	mul	r6, r25
 2ce:	f0 0d       	add	r31, r0
 2d0:	78 9e       	mul	r7, r24
 2d2:	f0 0d       	add	r31, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	e0 5f       	subi	r30, 0xF0	; 240
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	83 81       	ldd	r24, Z+3	; 0x03
 2dc:	94 81       	ldd	r25, Z+4	; 0x04
 2de:	4e d4       	rcall	.+2204   	; 0xb7c <phex16>
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
		
	return 1;
}
 2e4:	c9 01       	movw	r24, r18
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	bf 90       	pop	r11
 2f8:	af 90       	pop	r10
 2fa:	9f 90       	pop	r9
 2fc:	7f 90       	pop	r7
 2fe:	6f 90       	pop	r6
 300:	08 95       	ret

00000302 <PWM_loop>:
	return 1;
}

static uint32_t startTime = 0, endTime = 0, deltaTime = 0;
void PWM_loop(void)
{
 302:	af 92       	push	r10
 304:	bf 92       	push	r11
 306:	cf 92       	push	r12
 308:	df 92       	push	r13
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
	endTime = micros();
 316:	a2 d1       	rcall	.+836    	; 0x65c <micros>
 318:	60 93 04 01 	sts	0x0104, r22
 31c:	70 93 05 01 	sts	0x0105, r23
 320:	80 93 06 01 	sts	0x0106, r24
 324:	90 93 07 01 	sts	0x0107, r25
	deltaTime = endTime - startTime;
 328:	20 91 08 01 	lds	r18, 0x0108
 32c:	30 91 09 01 	lds	r19, 0x0109
 330:	40 91 0a 01 	lds	r20, 0x010A
 334:	50 91 0b 01 	lds	r21, 0x010B
 338:	5b 01       	movw	r10, r22
 33a:	6c 01       	movw	r12, r24
 33c:	a2 1a       	sub	r10, r18
 33e:	b3 0a       	sbc	r11, r19
 340:	c4 0a       	sbc	r12, r20
 342:	d5 0a       	sbc	r13, r21
 344:	a0 92 0c 01 	sts	0x010C, r10
 348:	b0 92 0d 01 	sts	0x010D, r11
 34c:	c0 92 0e 01 	sts	0x010E, r12
 350:	d0 92 0f 01 	sts	0x010F, r13
	startTime = endTime;
 354:	60 93 08 01 	sts	0x0108, r22
 358:	70 93 09 01 	sts	0x0109, r23
 35c:	80 93 0a 01 	sts	0x010A, r24
 360:	90 93 0b 01 	sts	0x010B, r25
 364:	c0 e1       	ldi	r28, 0x10	; 16
 366:	d1 e0       	ldi	r29, 0x01	; 1
	//phex16(deltaTime);
	
	int i = 0;
	for (i = 0; i <= 25; i++)
	{		
		if (teensyPin[i].pwmPercent) //if it's not zero...
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	88 23       	and	r24, r24
 36c:	09 f4       	brne	.+2      	; 0x370 <PWM_loop+0x6e>
 36e:	50 c0       	rjmp	.+160    	; 0x410 <PWM_loop+0x10e>
		{
			if (teensyPin[i].usOnRemaining > 0)
 370:	eb 84       	ldd	r14, Y+11	; 0x0b
 372:	fc 84       	ldd	r15, Y+12	; 0x0c
 374:	0d 85       	ldd	r16, Y+13	; 0x0d
 376:	1e 85       	ldd	r17, Y+14	; 0x0e
 378:	1e 14       	cp	r1, r14
 37a:	1f 04       	cpc	r1, r15
 37c:	10 06       	cpc	r1, r16
 37e:	11 06       	cpc	r1, r17
 380:	9c f4       	brge	.+38     	; 0x3a8 <PWM_loop+0xa6>
			{
				teensyPin[i].usOnRemaining -= deltaTime;
 382:	d8 01       	movw	r26, r16
 384:	c7 01       	movw	r24, r14
 386:	8a 19       	sub	r24, r10
 388:	9b 09       	sbc	r25, r11
 38a:	ac 09       	sbc	r26, r12
 38c:	bd 09       	sbc	r27, r13
 38e:	8b 87       	std	Y+11, r24	; 0x0b
 390:	9c 87       	std	Y+12, r25	; 0x0c
 392:	ad 87       	std	Y+13, r26	; 0x0d
 394:	be 87       	std	Y+14, r27	; 0x0e
				if (teensyPin[i].usOnRemaining <= 0)
 396:	18 16       	cp	r1, r24
 398:	19 06       	cpc	r1, r25
 39a:	1a 06       	cpc	r1, r26
 39c:	1b 06       	cpc	r1, r27
 39e:	c4 f1       	brlt	.+112    	; 0x410 <PWM_loop+0x10e>
					set_pin(teensyPin[i].port, teensyPin[i].pin, 0);
 3a0:	88 81       	ld	r24, Y
 3a2:	69 81       	ldd	r22, Y+1	; 0x01
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	33 c0       	rjmp	.+102    	; 0x40e <PWM_loop+0x10c>
			}
			else if (teensyPin[i].usOffRemaining > 0)
 3a8:	8f 85       	ldd	r24, Y+15	; 0x0f
 3aa:	98 89       	ldd	r25, Y+16	; 0x10
 3ac:	a9 89       	ldd	r26, Y+17	; 0x11
 3ae:	ba 89       	ldd	r27, Y+18	; 0x12
 3b0:	18 16       	cp	r1, r24
 3b2:	19 06       	cpc	r1, r25
 3b4:	1a 06       	cpc	r1, r26
 3b6:	1b 06       	cpc	r1, r27
 3b8:	5c f5       	brge	.+86     	; 0x410 <PWM_loop+0x10e>
			{
				teensyPin[i].usOffRemaining -= deltaTime;
 3ba:	9c 01       	movw	r18, r24
 3bc:	ad 01       	movw	r20, r26
 3be:	2a 19       	sub	r18, r10
 3c0:	3b 09       	sbc	r19, r11
 3c2:	4c 09       	sbc	r20, r12
 3c4:	5d 09       	sbc	r21, r13
 3c6:	2f 87       	std	Y+15, r18	; 0x0f
 3c8:	38 8b       	std	Y+16, r19	; 0x10
 3ca:	49 8b       	std	Y+17, r20	; 0x11
 3cc:	5a 8b       	std	Y+18, r21	; 0x12
				if (teensyPin[i].usOffRemaining <= 0)
 3ce:	12 16       	cp	r1, r18
 3d0:	13 06       	cpc	r1, r19
 3d2:	14 06       	cpc	r1, r20
 3d4:	15 06       	cpc	r1, r21
 3d6:	e4 f0       	brlt	.+56     	; 0x410 <PWM_loop+0x10e>
				{
					//off time has ended, so reset values
					teensyPin[i].usOnRemaining = teensyPin[i].usOn - teensyPin[i].usOnRemaining;
 3d8:	8b 81       	ldd	r24, Y+3	; 0x03
 3da:	9c 81       	ldd	r25, Y+4	; 0x04
 3dc:	ad 81       	ldd	r26, Y+5	; 0x05
 3de:	be 81       	ldd	r27, Y+6	; 0x06
 3e0:	8e 19       	sub	r24, r14
 3e2:	9f 09       	sbc	r25, r15
 3e4:	a0 0b       	sbc	r26, r16
 3e6:	b1 0b       	sbc	r27, r17
 3e8:	8b 87       	std	Y+11, r24	; 0x0b
 3ea:	9c 87       	std	Y+12, r25	; 0x0c
 3ec:	ad 87       	std	Y+13, r26	; 0x0d
 3ee:	be 87       	std	Y+14, r27	; 0x0e
					teensyPin[i].usOffRemaining = teensyPin[i].usOff - teensyPin[i].usOffRemaining;
 3f0:	8f 81       	ldd	r24, Y+7	; 0x07
 3f2:	98 85       	ldd	r25, Y+8	; 0x08
 3f4:	a9 85       	ldd	r26, Y+9	; 0x09
 3f6:	ba 85       	ldd	r27, Y+10	; 0x0a
 3f8:	82 1b       	sub	r24, r18
 3fa:	93 0b       	sbc	r25, r19
 3fc:	a4 0b       	sbc	r26, r20
 3fe:	b5 0b       	sbc	r27, r21
 400:	8f 87       	std	Y+15, r24	; 0x0f
 402:	98 8b       	std	Y+16, r25	; 0x10
 404:	a9 8b       	std	Y+17, r26	; 0x11
 406:	ba 8b       	std	Y+18, r27	; 0x12
					set_pin(teensyPin[i].port, teensyPin[i].pin, 1);
 408:	88 81       	ld	r24, Y
 40a:	69 81       	ldd	r22, Y+1	; 0x01
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	cd de       	rcall	.-614    	; 0x1aa <set_pin>
 410:	63 96       	adiw	r28, 0x13	; 19
	deltaTime = endTime - startTime;
	startTime = endTime;
	//phex16(deltaTime);
	
	int i = 0;
	for (i = 0; i <= 25; i++)
 412:	82 e0       	ldi	r24, 0x02	; 2
 414:	ce 3f       	cpi	r28, 0xFE	; 254
 416:	d8 07       	cpc	r29, r24
 418:	09 f0       	breq	.+2      	; 0x41c <PWM_loop+0x11a>
 41a:	a6 cf       	rjmp	.-180    	; 0x368 <PWM_loop+0x66>
					//print("Reset pin!");
				}
			}
		}
	}
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	df 90       	pop	r13
 42a:	cf 90       	pop	r12
 42c:	bf 90       	pop	r11
 42e:	af 90       	pop	r10
 430:	08 95       	ret

00000432 <PWM_init>:
		
	return 0;
}

int PWM_init(unsigned int Hz)
{
 432:	ef 92       	push	r14
 434:	ff 92       	push	r15
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	7c 01       	movw	r14, r24
	init();
 440:	33 d1       	rcall	.+614    	; 0x6a8 <init>
	usPulseLength = 1000000 / Hz;
 442:	00 e0       	ldi	r16, 0x00	; 0
 444:	10 e0       	ldi	r17, 0x00	; 0
 446:	60 e4       	ldi	r22, 0x40	; 64
 448:	72 e4       	ldi	r23, 0x42	; 66
 44a:	8f e0       	ldi	r24, 0x0F	; 15
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	a8 01       	movw	r20, r16
 450:	97 01       	movw	r18, r14
 452:	3a d5       	rcall	.+2676   	; 0xec8 <__divmodsi4>
 454:	20 93 00 01 	sts	0x0100, r18
 458:	30 93 01 01 	sts	0x0101, r19
 45c:	40 93 02 01 	sts	0x0102, r20
 460:	50 93 03 01 	sts	0x0103, r21
	
	//go through and set all the ports and pins in abstracted order
	teensyPin[0].port = 'B';
 464:	22 e4       	ldi	r18, 0x42	; 66
 466:	20 93 10 01 	sts	0x0110, r18
	teensyPin[0].pin = 0;
 46a:	10 92 11 01 	sts	0x0111, r1
	teensyPin[1].port = 'B';
 46e:	20 93 23 01 	sts	0x0123, r18
	teensyPin[1].pin = 1;
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	60 93 24 01 	sts	0x0124, r22
	teensyPin[2].port = 'B';
 478:	20 93 36 01 	sts	0x0136, r18
	teensyPin[2].pin = 2;
 47c:	32 e0       	ldi	r19, 0x02	; 2
 47e:	30 93 37 01 	sts	0x0137, r19
	teensyPin[3].port = 'B';
 482:	20 93 49 01 	sts	0x0149, r18
	teensyPin[3].pin = 3;
 486:	93 e0       	ldi	r25, 0x03	; 3
 488:	90 93 4a 01 	sts	0x014A, r25
	teensyPin[4].port = 'B';
 48c:	20 93 5c 01 	sts	0x015C, r18
	teensyPin[4].pin = 7;
 490:	57 e0       	ldi	r21, 0x07	; 7
 492:	50 93 5d 01 	sts	0x015D, r21
	teensyPin[5].port = 'D';
 496:	84 e4       	ldi	r24, 0x44	; 68
 498:	80 93 6f 01 	sts	0x016F, r24
	teensyPin[5].pin = 0;
 49c:	10 92 70 01 	sts	0x0170, r1
	teensyPin[6].port = 'D';
 4a0:	80 93 82 01 	sts	0x0182, r24
	teensyPin[6].pin = 1;
 4a4:	60 93 83 01 	sts	0x0183, r22
	teensyPin[7].port = 'D';
 4a8:	80 93 95 01 	sts	0x0195, r24
	teensyPin[7].pin = 2;
 4ac:	30 93 96 01 	sts	0x0196, r19
	teensyPin[8].port = 'D';
 4b0:	80 93 a8 01 	sts	0x01A8, r24
	teensyPin[8].pin = 3;
 4b4:	90 93 a9 01 	sts	0x01A9, r25
	teensyPin[9].port = 'C';
 4b8:	93 e4       	ldi	r25, 0x43	; 67
 4ba:	90 93 bb 01 	sts	0x01BB, r25
	teensyPin[9].pin = 6;
 4be:	46 e0       	ldi	r20, 0x06	; 6
 4c0:	40 93 bc 01 	sts	0x01BC, r20
	teensyPin[10].port = 'C';
 4c4:	90 93 ce 01 	sts	0x01CE, r25
	teensyPin[10].pin = 7;
 4c8:	50 93 cf 01 	sts	0x01CF, r21
	teensyPin[11].port = 'D';
 4cc:	80 93 e1 01 	sts	0x01E1, r24
	teensyPin[11].pin = 5;
 4d0:	35 e0       	ldi	r19, 0x05	; 5
 4d2:	30 93 e2 01 	sts	0x01E2, r19
	teensyPin[12].port = 'D';
 4d6:	80 93 f4 01 	sts	0x01F4, r24
	teensyPin[12].pin = 4;
 4da:	94 e0       	ldi	r25, 0x04	; 4
 4dc:	90 93 f5 01 	sts	0x01F5, r25
	teensyPin[13].port = 'D';
 4e0:	80 93 07 02 	sts	0x0207, r24
	teensyPin[13].pin = 6;
 4e4:	40 93 08 02 	sts	0x0208, r20
	teensyPin[14].port = 'D';
 4e8:	80 93 1a 02 	sts	0x021A, r24
	teensyPin[14].pin = 7;
 4ec:	50 93 1b 02 	sts	0x021B, r21
	teensyPin[15].port = 'B';
 4f0:	20 93 2d 02 	sts	0x022D, r18
	teensyPin[15].pin = 4;
 4f4:	90 93 2e 02 	sts	0x022E, r25
	teensyPin[16].port = 'B';
 4f8:	20 93 40 02 	sts	0x0240, r18
	teensyPin[16].pin = 5;
 4fc:	30 93 41 02 	sts	0x0241, r19
	teensyPin[17].port = 'B';
 500:	20 93 53 02 	sts	0x0253, r18
	teensyPin[17].pin = 6;
 504:	40 93 54 02 	sts	0x0254, r20
	teensyPin[18].port = 'F';
 508:	86 e4       	ldi	r24, 0x46	; 70
 50a:	80 93 66 02 	sts	0x0266, r24
	teensyPin[18].pin = 7;
 50e:	50 93 67 02 	sts	0x0267, r21
	teensyPin[19].port = 'F';
 512:	80 93 79 02 	sts	0x0279, r24
	teensyPin[19].pin = 6;
 516:	40 93 7a 02 	sts	0x027A, r20
	teensyPin[20].port = 'F';
 51a:	80 93 8c 02 	sts	0x028C, r24
	teensyPin[20].pin = 5;
 51e:	30 93 8d 02 	sts	0x028D, r19
	teensyPin[21].port = 'F';
 522:	80 93 9f 02 	sts	0x029F, r24
	teensyPin[21].pin = 4;
 526:	90 93 a0 02 	sts	0x02A0, r25
	teensyPin[22].port = 'F';
 52a:	80 93 b2 02 	sts	0x02B2, r24
	teensyPin[22].pin = 1;
 52e:	60 93 b3 02 	sts	0x02B3, r22
	teensyPin[23].port = 'F';
 532:	80 93 c5 02 	sts	0x02C5, r24
	teensyPin[23].pin = 0;
 536:	10 92 c6 02 	sts	0x02C6, r1
	teensyPin[24].port = 'F';
 53a:	80 93 d8 02 	sts	0x02D8, r24
	teensyPin[24].pin = 5;
 53e:	30 93 d9 02 	sts	0x02D9, r19
	teensyPin[25].port = 'E';
 542:	85 e4       	ldi	r24, 0x45	; 69
 544:	80 93 eb 02 	sts	0x02EB, r24
	teensyPin[25].pin = 6;	
 548:	40 93 ec 02 	sts	0x02EC, r20
 54c:	c0 e1       	ldi	r28, 0x10	; 16
 54e:	d1 e0       	ldi	r29, 0x01	; 1
	
	//initialize all the pins to very much off
	int i = 0;
	for (i = 0; i <= 25; i++)
	{
		teensyPin[i].pwmPercent = 0;
 550:	1a 82       	std	Y+2, r1	; 0x02
		teensyPin[i].usOn = 0;
 552:	1b 82       	std	Y+3, r1	; 0x03
 554:	1c 82       	std	Y+4, r1	; 0x04
 556:	1d 82       	std	Y+5, r1	; 0x05
 558:	1e 82       	std	Y+6, r1	; 0x06
		teensyPin[i].usOff = 0;
 55a:	1f 82       	std	Y+7, r1	; 0x07
 55c:	18 86       	std	Y+8, r1	; 0x08
 55e:	19 86       	std	Y+9, r1	; 0x09
 560:	1a 86       	std	Y+10, r1	; 0x0a
		teensyPin[i].usOnRemaining = 0;
 562:	1b 86       	std	Y+11, r1	; 0x0b
 564:	1c 86       	std	Y+12, r1	; 0x0c
 566:	1d 86       	std	Y+13, r1	; 0x0d
 568:	1e 86       	std	Y+14, r1	; 0x0e
		teensyPin[i].usOffRemaining = 0;	
 56a:	1f 86       	std	Y+15, r1	; 0x0f
 56c:	18 8a       	std	Y+16, r1	; 0x10
 56e:	19 8a       	std	Y+17, r1	; 0x11
 570:	1a 8a       	std	Y+18, r1	; 0x12
		set_pin(teensyPin[i].port, teensyPin[i].pin, 0);
 572:	88 81       	ld	r24, Y
 574:	69 81       	ldd	r22, Y+1	; 0x01
 576:	40 e0       	ldi	r20, 0x00	; 0
 578:	18 de       	rcall	.-976    	; 0x1aa <set_pin>
 57a:	63 96       	adiw	r28, 0x13	; 19
	teensyPin[25].port = 'E';
	teensyPin[25].pin = 6;	
	
	//initialize all the pins to very much off
	int i = 0;
	for (i = 0; i <= 25; i++)
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	ce 3f       	cpi	r28, 0xFE	; 254
 580:	d8 07       	cpc	r29, r24
 582:	31 f7       	brne	.-52     	; 0x550 <PWM_init+0x11e>
		teensyPin[i].usOffRemaining = 0;	
		set_pin(teensyPin[i].port, teensyPin[i].pin, 0);
	}
	
	return 1;
}
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	08 95       	ret

00000596 <main>:

//here for testing. Remove when turned to a library.
int main(void)
{
	//set up usb debugging
	usb_init();
 596:	e8 d0       	rcall	.+464    	; 0x768 <usb_init>
 598:	80 e1       	ldi	r24, 0x10	; 16
 59a:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 59c:	20 e9       	ldi	r18, 0x90	; 144
 59e:	31 e0       	ldi	r19, 0x01	; 1
 5a0:	f9 01       	movw	r30, r18
 5a2:	31 97       	sbiw	r30, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <main+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5a8:	d9 f7       	brne	.-10     	; 0x5a0 <main+0xa>
	
	//wait a few seconds for it to setup
	_delay_ms(1000);
	
	
	if (PWM_init(200))
 5aa:	88 ec       	ldi	r24, 0xC8	; 200
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	41 df       	rcall	.-382    	; 0x432 <PWM_init>
 5b0:	89 2b       	or	r24, r25
 5b2:	21 f0       	breq	.+8      	; 0x5bc <main+0x26>
		set_pin('B', 1, 1);
 5b4:	82 e4       	ldi	r24, 0x42	; 66
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	f7 dd       	rcall	.-1042   	; 0x1aa <set_pin>
		
	set_abstract_pin_PWM(0, 25);
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	69 e1       	ldi	r22, 0x19	; 25
 5c0:	25 de       	rcall	.-950    	; 0x20c <set_abstract_pin_PWM>
	set_abstract_pin_PWM(23, 25);
 5c2:	87 e1       	ldi	r24, 0x17	; 23
 5c4:	69 e1       	ldi	r22, 0x19	; 25
 5c6:	22 de       	rcall	.-956    	; 0x20c <set_abstract_pin_PWM>
	
	while (1)
	{
		PWM_loop();
 5c8:	9c de       	rcall	.-712    	; 0x302 <PWM_loop>
 5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <main+0x32>

000005cc <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 5e2:	80 91 02 03 	lds	r24, 0x0302
 5e6:	90 91 03 03 	lds	r25, 0x0303
 5ea:	a0 91 04 03 	lds	r26, 0x0304
 5ee:	b0 91 05 03 	lds	r27, 0x0305
	unsigned char f = timer0_fract;
 5f2:	30 91 06 03 	lds	r19, 0x0306

	m += MILLIS_INC;
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	a1 1d       	adc	r26, r1
 5fa:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 5fc:	23 2f       	mov	r18, r19
 5fe:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 600:	2d 37       	cpi	r18, 0x7D	; 125
 602:	20 f0       	brcs	.+8      	; 0x60c <__vector_23+0x40>
		f -= FRACT_MAX;
 604:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	a1 1d       	adc	r26, r1
 60a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 60c:	20 93 06 03 	sts	0x0306, r18
	timer0_millis = m;
 610:	80 93 02 03 	sts	0x0302, r24
 614:	90 93 03 03 	sts	0x0303, r25
 618:	a0 93 04 03 	sts	0x0304, r26
 61c:	b0 93 05 03 	sts	0x0305, r27
	timer0_overflow_count++;
 620:	80 91 fe 02 	lds	r24, 0x02FE
 624:	90 91 ff 02 	lds	r25, 0x02FF
 628:	a0 91 00 03 	lds	r26, 0x0300
 62c:	b0 91 01 03 	lds	r27, 0x0301
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	a1 1d       	adc	r26, r1
 634:	b1 1d       	adc	r27, r1
 636:	80 93 fe 02 	sts	0x02FE, r24
 63a:	90 93 ff 02 	sts	0x02FF, r25
 63e:	a0 93 00 03 	sts	0x0300, r26
 642:	b0 93 01 03 	sts	0x0301, r27
}
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	3f 91       	pop	r19
 650:	2f 91       	pop	r18
 652:	0f 90       	pop	r0
 654:	0f be       	out	0x3f, r0	; 63
 656:	0f 90       	pop	r0
 658:	1f 90       	pop	r1
 65a:	18 95       	reti

0000065c <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 65c:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 65e:	f8 94       	cli
	m = timer0_overflow_count;
 660:	20 91 fe 02 	lds	r18, 0x02FE
 664:	30 91 ff 02 	lds	r19, 0x02FF
 668:	40 91 00 03 	lds	r20, 0x0300
 66c:	50 91 01 03 	lds	r21, 0x0301
#if defined(TCNT0)
	t = TCNT0;
 670:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 672:	a8 9b       	sbis	0x15, 0	; 21
 674:	06 c0       	rjmp	.+12     	; 0x682 <micros+0x26>
 676:	8f 3f       	cpi	r24, 0xFF	; 255
 678:	21 f0       	breq	.+8      	; 0x682 <micros+0x26>
		m++;
 67a:	2f 5f       	subi	r18, 0xFF	; 255
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	4f 4f       	sbci	r20, 0xFF	; 255
 680:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 682:	9f bf       	out	0x3f, r25	; 63
 684:	54 2f       	mov	r21, r20
 686:	43 2f       	mov	r20, r19
 688:	32 2f       	mov	r19, r18
 68a:	22 27       	eor	r18, r18
 68c:	28 0f       	add	r18, r24
 68e:	31 1d       	adc	r19, r1
 690:	41 1d       	adc	r20, r1
 692:	51 1d       	adc	r21, r1
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	22 0f       	add	r18, r18
 698:	33 1f       	adc	r19, r19
 69a:	44 1f       	adc	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	8a 95       	dec	r24
 6a0:	d1 f7       	brne	.-12     	; 0x696 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
 6a2:	b9 01       	movw	r22, r18
 6a4:	ca 01       	movw	r24, r20
 6a6:	08 95       	ret

000006a8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 6a8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 6aa:	84 b5       	in	r24, 0x24	; 36
 6ac:	82 60       	ori	r24, 0x02	; 2
 6ae:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 6b0:	84 b5       	in	r24, 0x24	; 36
 6b2:	81 60       	ori	r24, 0x01	; 1
 6b4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 6b6:	85 b5       	in	r24, 0x25	; 37
 6b8:	82 60       	ori	r24, 0x02	; 2
 6ba:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 6bc:	85 b5       	in	r24, 0x25	; 37
 6be:	81 60       	ori	r24, 0x01	; 1
 6c0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 6c2:	ee e6       	ldi	r30, 0x6E	; 110
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 6cc:	e1 e8       	ldi	r30, 0x81	; 129
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 6d2:	80 81       	ld	r24, Z
 6d4:	82 60       	ori	r24, 0x02	; 2
 6d6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 6d8:	80 81       	ld	r24, Z
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 6de:	e0 e8       	ldi	r30, 0x80	; 128
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	81 60       	ori	r24, 0x01	; 1
 6e6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 6e8:	e1 eb       	ldi	r30, 0xB1	; 177
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	84 60       	ori	r24, 0x04	; 4
 6f0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 6f2:	e0 eb       	ldi	r30, 0xB0	; 176
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
 6fc:	e1 e9       	ldi	r30, 0x91	; 145
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	82 60       	ori	r24, 0x02	; 2
 704:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
 706:	80 81       	ld	r24, Z
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
 70c:	e0 e9       	ldi	r30, 0x90	; 144
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	81 60       	ori	r24, 0x01	; 1
 714:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
 716:	e1 ec       	ldi	r30, 0xC1	; 193
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	84 60       	ori	r24, 0x04	; 4
 71e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
 720:	80 81       	ld	r24, Z
 722:	82 60       	ori	r24, 0x02	; 2
 724:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
 726:	80 81       	ld	r24, Z
 728:	81 60       	ori	r24, 0x01	; 1
 72a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
 72c:	e3 ec       	ldi	r30, 0xC3	; 195
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	81 60       	ori	r24, 0x01	; 1
 734:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
 736:	e0 ec       	ldi	r30, 0xC0	; 192
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 81       	ld	r24, Z
 73c:	82 60       	ori	r24, 0x02	; 2
 73e:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
 740:	e2 ec       	ldi	r30, 0xC2	; 194
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	81 60       	ori	r24, 0x01	; 1
 748:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 74a:	ea e7       	ldi	r30, 0x7A	; 122
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	84 60       	ori	r24, 0x04	; 4
 752:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 754:	80 81       	ld	r24, Z
 756:	82 60       	ori	r24, 0x02	; 2
 758:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 75a:	80 81       	ld	r24, Z
 75c:	81 60       	ori	r24, 0x01	; 1
 75e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 760:	80 81       	ld	r24, Z
 762:	80 68       	ori	r24, 0x80	; 128
 764:	80 83       	st	Z, r24
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
#endif
}
 766:	08 95       	ret

00000768 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 76e:	80 ea       	ldi	r24, 0xA0	; 160
 770:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 774:	82 e1       	ldi	r24, 0x12	; 18
 776:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 778:	09 b4       	in	r0, 0x29	; 41
 77a:	00 fe       	sbrs	r0, 0
 77c:	fd cf       	rjmp	.-6      	; 0x778 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 77e:	80 e9       	ldi	r24, 0x90	; 144
 780:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 784:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 788:	10 92 07 03 	sts	0x0307, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 78c:	8c e0       	ldi	r24, 0x0C	; 12
 78e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 792:	78 94       	sei
}
 794:	08 95       	ret

00000796 <usb_debug_putchar>:
	return usb_configuration;
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_debug_putchar(uint8_t c)
{
 796:	48 2f       	mov	r20, r24
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 798:	80 91 07 03 	lds	r24, 0x0307
 79c:	88 23       	and	r24, r24
 79e:	09 f4       	brne	.+2      	; 0x7a2 <usb_debug_putchar+0xc>
 7a0:	3e c0       	rjmp	.+124    	; 0x81e <usb_debug_putchar+0x88>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 7a2:	2f b7       	in	r18, 0x3f	; 63
	cli();
 7a4:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 7a6:	83 e0       	ldi	r24, 0x03	; 3
 7a8:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 7ac:	80 91 09 03 	lds	r24, 0x0309
 7b0:	88 23       	and	r24, r24
 7b2:	41 f0       	breq	.+16     	; 0x7c4 <usb_debug_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 7b4:	80 91 e8 00 	lds	r24, 0x00E8
 7b8:	85 fd       	sbrc	r24, 5
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <usb_debug_putchar+0x2a>
			SREG = intr_state;
 7bc:	2f bf       	out	0x3f, r18	; 63
 7be:	12 c0       	rjmp	.+36     	; 0x7e4 <usb_debug_putchar+0x4e>
			return -1;
		}
		previous_timeout = 0;
 7c0:	10 92 09 03 	sts	0x0309, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 7c4:	90 91 e4 00 	lds	r25, 0x00E4
 7c8:	9c 5f       	subi	r25, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 7ca:	33 e0       	ldi	r19, 0x03	; 3
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 7cc:	80 91 e8 00 	lds	r24, 0x00E8
 7d0:	85 fd       	sbrc	r24, 5
 7d2:	13 c0       	rjmp	.+38     	; 0x7fa <usb_debug_putchar+0x64>
		SREG = intr_state;
 7d4:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 7d6:	80 91 e4 00 	lds	r24, 0x00E4
 7da:	89 17       	cp	r24, r25
 7dc:	29 f4       	brne	.+10     	; 0x7e8 <usb_debug_putchar+0x52>
			previous_timeout = 1;
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	80 93 09 03 	sts	0x0309, r24
 7e4:	8f ef       	ldi	r24, 0xFF	; 255
 7e6:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 7e8:	80 91 07 03 	lds	r24, 0x0307
 7ec:	88 23       	and	r24, r24
 7ee:	b9 f0       	breq	.+46     	; 0x81e <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 7f0:	2f b7       	in	r18, 0x3f	; 63
		cli();
 7f2:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 7f4:	30 93 e9 00 	sts	0x00E9, r19
 7f8:	e9 cf       	rjmp	.-46     	; 0x7cc <usb_debug_putchar+0x36>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 7fa:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 7fe:	80 91 e8 00 	lds	r24, 0x00E8
 802:	85 fd       	sbrc	r24, 5
 804:	06 c0       	rjmp	.+12     	; 0x812 <usb_debug_putchar+0x7c>
		UEINTX = 0x3A;
 806:	8a e3       	ldi	r24, 0x3A	; 58
 808:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 80c:	10 92 08 03 	sts	0x0308, r1
 810:	03 c0       	rjmp	.+6      	; 0x818 <usb_debug_putchar+0x82>
	} else {
		debug_flush_timer = 2;
 812:	82 e0       	ldi	r24, 0x02	; 2
 814:	80 93 08 03 	sts	0x0308, r24
	}
	SREG = intr_state;
 818:	2f bf       	out	0x3f, r18	; 63
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	08 95       	ret
	return 0;
 81e:	8f ef       	ldi	r24, 0xFF	; 255
}
 820:	08 95       	ret

00000822 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 822:	1f 92       	push	r1
 824:	0f 92       	push	r0
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	0f 92       	push	r0
 82a:	11 24       	eor	r1, r1
 82c:	8f 93       	push	r24
 82e:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 830:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 834:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 838:	98 2f       	mov	r25, r24
 83a:	83 ff       	sbrs	r24, 3
 83c:	0f c0       	rjmp	.+30     	; 0x85c <__vector_10+0x3a>
		UENUM = 0;
 83e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 848:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 84c:	82 e2       	ldi	r24, 0x22	; 34
 84e:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 852:	88 e0       	ldi	r24, 0x08	; 8
 854:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 858:	10 92 07 03 	sts	0x0307, r1
        }
	if (intbits & (1<<SOFI)) {
 85c:	92 ff       	sbrs	r25, 2
 85e:	1a c0       	rjmp	.+52     	; 0x894 <__vector_10+0x72>
		if (usb_configuration) {
 860:	80 91 07 03 	lds	r24, 0x0307
 864:	88 23       	and	r24, r24
 866:	b1 f0       	breq	.+44     	; 0x894 <__vector_10+0x72>
			t = debug_flush_timer;
 868:	80 91 08 03 	lds	r24, 0x0308
			if (t) {
 86c:	88 23       	and	r24, r24
 86e:	91 f0       	breq	.+36     	; 0x894 <__vector_10+0x72>
				debug_flush_timer = -- t;
 870:	81 50       	subi	r24, 0x01	; 1
 872:	80 93 08 03 	sts	0x0308, r24
				if (!t) {
 876:	88 23       	and	r24, r24
 878:	69 f4       	brne	.+26     	; 0x894 <__vector_10+0x72>
					UENUM = DEBUG_TX_ENDPOINT;
 87a:	83 e0       	ldi	r24, 0x03	; 3
 87c:	80 93 e9 00 	sts	0x00E9, r24
 880:	02 c0       	rjmp	.+4      	; 0x886 <__vector_10+0x64>
					while ((UEINTX & (1<<RWAL))) {
						UEDATX = 0;
 882:	10 92 f1 00 	sts	0x00F1, r1
			t = debug_flush_timer;
			if (t) {
				debug_flush_timer = -- t;
				if (!t) {
					UENUM = DEBUG_TX_ENDPOINT;
					while ((UEINTX & (1<<RWAL))) {
 886:	80 91 e8 00 	lds	r24, 0x00E8
 88a:	85 fd       	sbrc	r24, 5
 88c:	fa cf       	rjmp	.-12     	; 0x882 <__vector_10+0x60>
						UEDATX = 0;
					}
					UEINTX = 0x3A;
 88e:	8a e3       	ldi	r24, 0x3A	; 58
 890:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 894:	9f 91       	pop	r25
 896:	8f 91       	pop	r24
 898:	0f 90       	pop	r0
 89a:	0f be       	out	0x3f, r0	; 63
 89c:	0f 90       	pop	r0
 89e:	1f 90       	pop	r1
 8a0:	18 95       	reti

000008a2 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 8a2:	1f 92       	push	r1
 8a4:	0f 92       	push	r0
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	0f 92       	push	r0
 8aa:	11 24       	eor	r1, r1
 8ac:	2f 93       	push	r18
 8ae:	3f 93       	push	r19
 8b0:	4f 93       	push	r20
 8b2:	5f 93       	push	r21
 8b4:	6f 93       	push	r22
 8b6:	7f 93       	push	r23
 8b8:	8f 93       	push	r24
 8ba:	9f 93       	push	r25
 8bc:	af 93       	push	r26
 8be:	bf 93       	push	r27
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	ef 93       	push	r30
 8c6:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 8c8:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 8cc:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 8d0:	83 ff       	sbrs	r24, 3
 8d2:	2c c1       	rjmp	.+600    	; 0xb2c <__stack+0x2d>
                bmRequestType = UEDATX;
 8d4:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 8d8:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 8dc:	80 91 f1 00 	lds	r24, 0x00F1
 8e0:	a8 2f       	mov	r26, r24
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 8e4:	20 91 f1 00 	lds	r18, 0x00F1
 8e8:	92 2f       	mov	r25, r18
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	a8 2b       	or	r26, r24
 8ee:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 8f0:	80 91 f1 00 	lds	r24, 0x00F1
 8f4:	68 2f       	mov	r22, r24
 8f6:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 8f8:	20 91 f1 00 	lds	r18, 0x00F1
 8fc:	92 2f       	mov	r25, r18
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	68 2b       	or	r22, r24
 902:	79 2b       	or	r23, r25
                wLength = UEDATX;
 904:	80 91 f1 00 	lds	r24, 0x00F1
 908:	c8 2f       	mov	r28, r24
 90a:	d0 e0       	ldi	r29, 0x00	; 0
                wLength |= (UEDATX << 8);
 90c:	20 91 f1 00 	lds	r18, 0x00F1
 910:	92 2f       	mov	r25, r18
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	c8 2b       	or	r28, r24
 916:	d9 2b       	or	r29, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 918:	82 ef       	ldi	r24, 0xF2	; 242
 91a:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 91e:	36 30       	cpi	r19, 0x06	; 6
 920:	09 f0       	breq	.+2      	; 0x924 <__vector_11+0x82>
 922:	56 c0       	rjmp	.+172    	; 0x9d0 <__vector_11+0x12e>
 924:	2c eb       	ldi	r18, 0xBC	; 188
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	a9 01       	movw	r20, r18
 92a:	45 50       	subi	r20, 0x05	; 5
 92c:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 92e:	f9 01       	movw	r30, r18
 930:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 932:	85 91       	lpm	r24, Z+
 934:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 936:	8a 17       	cp	r24, r26
 938:	9b 07       	cpc	r25, r27
 93a:	e1 f4       	brne	.+56     	; 0x974 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 93c:	fa 01       	movw	r30, r20
 93e:	85 91       	lpm	r24, Z+
 940:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 942:	86 17       	cp	r24, r22
 944:	97 07       	cpc	r25, r23
 946:	b1 f4       	brne	.+44     	; 0x974 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 948:	9a 01       	movw	r18, r20
 94a:	2e 5f       	subi	r18, 0xFE	; 254
 94c:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 94e:	f9 01       	movw	r30, r18
 950:	65 91       	lpm	r22, Z+
 952:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 954:	2e 5f       	subi	r18, 0xFE	; 254
 956:	3f 4f       	sbci	r19, 0xFF	; 255
 958:	f9 01       	movw	r30, r18
 95a:	24 91       	lpm	r18, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 95c:	ce 01       	movw	r24, r28
 95e:	cf 3f       	cpi	r28, 0xFF	; 255
 960:	d1 05       	cpc	r29, r1
 962:	19 f0       	breq	.+6      	; 0x96a <__vector_11+0xc8>
 964:	10 f0       	brcs	.+4      	; 0x96a <__vector_11+0xc8>
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	42 2f       	mov	r20, r18
 96c:	82 17       	cp	r24, r18
 96e:	58 f4       	brcc	.+22     	; 0x986 <__vector_11+0xe4>
 970:	48 2f       	mov	r20, r24
 972:	09 c0       	rjmp	.+18     	; 0x986 <__vector_11+0xe4>
 974:	29 5f       	subi	r18, 0xF9	; 249
 976:	3f 4f       	sbci	r19, 0xFF	; 255
 978:	49 5f       	subi	r20, 0xF9	; 249
 97a:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	2d 3e       	cpi	r18, 0xED	; 237
 980:	3f 07       	cpc	r19, r31
 982:	a9 f6       	brne	.-86     	; 0x92e <__vector_11+0x8c>
 984:	d3 c0       	rjmp	.+422    	; 0xb2c <__stack+0x2d>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 986:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 988:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 98c:	28 2f       	mov	r18, r24
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	c9 01       	movw	r24, r18
 992:	85 70       	andi	r24, 0x05	; 5
 994:	90 70       	andi	r25, 0x00	; 0
 996:	89 2b       	or	r24, r25
 998:	b9 f3       	breq	.-18     	; 0x988 <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 99a:	22 fd       	sbrc	r18, 2
 99c:	ca c0       	rjmp	.+404    	; 0xb32 <__stack+0x33>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 99e:	34 2f       	mov	r19, r20
 9a0:	41 32       	cpi	r20, 0x21	; 33
 9a2:	08 f0       	brcs	.+2      	; 0x9a6 <__vector_11+0x104>
 9a4:	30 e2       	ldi	r19, 0x20	; 32
 9a6:	23 2f       	mov	r18, r19
 9a8:	cb 01       	movw	r24, r22
 9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <__vector_11+0x116>
				for (i = n; i; i--) {
 9ac:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	e4 91       	lpm	r30, Z+
 9b2:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 9b6:	21 50       	subi	r18, 0x01	; 1
 9b8:	22 23       	and	r18, r18
 9ba:	c1 f7       	brne	.-16     	; 0x9ac <__vector_11+0x10a>
 9bc:	63 0f       	add	r22, r19
 9be:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 9c0:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9c2:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 9c6:	44 23       	and	r20, r20
 9c8:	f9 f6       	brne	.-66     	; 0x988 <__vector_11+0xe6>
 9ca:	30 32       	cpi	r19, 0x20	; 32
 9cc:	e9 f2       	breq	.-70     	; 0x988 <__vector_11+0xe6>
 9ce:	b1 c0       	rjmp	.+354    	; 0xb32 <__stack+0x33>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 9d0:	35 30       	cpi	r19, 0x05	; 5
 9d2:	61 f4       	brne	.+24     	; 0x9ec <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9d4:	8e ef       	ldi	r24, 0xFE	; 254
 9d6:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 9da:	80 91 e8 00 	lds	r24, 0x00E8
 9de:	80 ff       	sbrs	r24, 0
 9e0:	fc cf       	rjmp	.-8      	; 0x9da <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 9e2:	8a 2f       	mov	r24, r26
 9e4:	80 68       	ori	r24, 0x80	; 128
 9e6:	80 93 e3 00 	sts	0x00E3, r24
 9ea:	a3 c0       	rjmp	.+326    	; 0xb32 <__stack+0x33>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 9ec:	39 30       	cpi	r19, 0x09	; 9
 9ee:	31 f5       	brne	.+76     	; 0xa3c <__vector_11+0x19a>
 9f0:	44 23       	and	r20, r20
 9f2:	09 f0       	breq	.+2      	; 0x9f6 <__vector_11+0x154>
 9f4:	9b c0       	rjmp	.+310    	; 0xb2c <__stack+0x2d>
			usb_configuration = wValue;
 9f6:	a0 93 07 03 	sts	0x0307, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9fa:	8e ef       	ldi	r24, 0xFE	; 254
 9fc:	80 93 e8 00 	sts	0x00E8, r24
 a00:	86 ee       	ldi	r24, 0xE6	; 230
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 a06:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 a0a:	fc 01       	movw	r30, r24
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	e4 91       	lpm	r30, Z+
				UECONX = en;
 a10:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 a14:	ee 23       	and	r30, r30
 a16:	69 f0       	breq	.+26     	; 0xa32 <__vector_11+0x190>
					UECFG0X = pgm_read_byte(cfg++);
 a18:	ac 01       	movw	r20, r24
 a1a:	4f 5f       	subi	r20, 0xFF	; 255
 a1c:	5f 4f       	sbci	r21, 0xFF	; 255
 a1e:	fc 01       	movw	r30, r24
 a20:	84 91       	lpm	r24, Z+
 a22:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 a26:	ca 01       	movw	r24, r20
 a28:	01 96       	adiw	r24, 0x01	; 1
 a2a:	fa 01       	movw	r30, r20
 a2c:	34 91       	lpm	r19, Z+
 a2e:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 a32:	2f 5f       	subi	r18, 0xFF	; 255
 a34:	25 30       	cpi	r18, 0x05	; 5
 a36:	39 f7       	brne	.-50     	; 0xa06 <__vector_11+0x164>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 a38:	8e e1       	ldi	r24, 0x1E	; 30
 a3a:	4d c0       	rjmp	.+154    	; 0xad6 <__vector_11+0x234>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 a3c:	38 30       	cpi	r19, 0x08	; 8
 a3e:	61 f4       	brne	.+24     	; 0xa58 <__vector_11+0x1b6>
 a40:	40 38       	cpi	r20, 0x80	; 128
 a42:	09 f0       	breq	.+2      	; 0xa46 <__vector_11+0x1a4>
 a44:	73 c0       	rjmp	.+230    	; 0xb2c <__stack+0x2d>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 a46:	80 91 e8 00 	lds	r24, 0x00E8
 a4a:	80 ff       	sbrs	r24, 0
 a4c:	fc cf       	rjmp	.-8      	; 0xa46 <__vector_11+0x1a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 a4e:	80 91 07 03 	lds	r24, 0x0307
 a52:	80 93 f1 00 	sts	0x00F1, r24
 a56:	1b c0       	rjmp	.+54     	; 0xa8e <__vector_11+0x1ec>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 a58:	33 23       	and	r19, r19
 a5a:	e9 f4       	brne	.+58     	; 0xa96 <__vector_11+0x1f4>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 a5c:	80 91 e8 00 	lds	r24, 0x00E8
 a60:	80 ff       	sbrs	r24, 0
 a62:	fc cf       	rjmp	.-8      	; 0xa5c <__vector_11+0x1ba>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 a64:	42 38       	cpi	r20, 0x82	; 130
 a66:	11 f0       	breq	.+4      	; 0xa6c <__vector_11+0x1ca>
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <__vector_11+0x1e4>
				UENUM = wIndex;
 a6c:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 a70:	80 91 eb 00 	lds	r24, 0x00EB
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	25 e0       	ldi	r18, 0x05	; 5
 a78:	96 95       	lsr	r25
 a7a:	87 95       	ror	r24
 a7c:	2a 95       	dec	r18
 a7e:	e1 f7       	brne	.-8      	; 0xa78 <__vector_11+0x1d6>
 a80:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 a82:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 a86:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 a8a:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 a8e:	8e ef       	ldi	r24, 0xFE	; 254
 a90:	80 93 e8 00 	sts	0x00E8, r24
 a94:	4e c0       	rjmp	.+156    	; 0xb32 <__stack+0x33>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 a96:	31 30       	cpi	r19, 0x01	; 1
 a98:	19 f0       	breq	.+6      	; 0xaa0 <__vector_11+0x1fe>
 a9a:	33 30       	cpi	r19, 0x03	; 3
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <__vector_11+0x1fe>
 a9e:	46 c0       	rjmp	.+140    	; 0xb2c <__stack+0x2d>
 aa0:	42 30       	cpi	r20, 0x02	; 2
 aa2:	f1 f4       	brne	.+60     	; 0xae0 <__vector_11+0x23e>
 aa4:	ab 2b       	or	r26, r27
 aa6:	e1 f4       	brne	.+56     	; 0xae0 <__vector_11+0x23e>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 aa8:	26 2f       	mov	r18, r22
 aaa:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 aac:	82 2f       	mov	r24, r18
 aae:	81 50       	subi	r24, 0x01	; 1
 ab0:	84 30       	cpi	r24, 0x04	; 4
 ab2:	b0 f4       	brcc	.+44     	; 0xae0 <__vector_11+0x23e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 ab4:	8e ef       	ldi	r24, 0xFE	; 254
 ab6:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 aba:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 abe:	33 30       	cpi	r19, 0x03	; 3
 ac0:	a9 f1       	breq	.+106    	; 0xb2c <__stack+0x2d>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 ac2:	89 e1       	ldi	r24, 0x19	; 25
 ac4:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 ac8:	81 e0       	ldi	r24, 0x01	; 1
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <__vector_11+0x230>
 ace:	88 0f       	add	r24, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	2a 95       	dec	r18
 ad4:	e2 f7       	brpl	.-8      	; 0xace <__vector_11+0x22c>
 ad6:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 ada:	10 92 ea 00 	sts	0x00EA, r1
 ade:	29 c0       	rjmp	.+82     	; 0xb32 <__stack+0x33>
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 ae0:	31 30       	cpi	r19, 0x01	; 1
 ae2:	21 f5       	brne	.+72     	; 0xb2c <__stack+0x2d>
 ae4:	41 3a       	cpi	r20, 0xA1	; 161
 ae6:	11 f5       	brne	.+68     	; 0xb2c <__stack+0x2d>
			if (wIndex == 0) {
 ae8:	67 2b       	or	r22, r23
 aea:	01 f5       	brne	.+64     	; 0xb2c <__stack+0x2d>
				len = wLength;
 aec:	4c 2f       	mov	r20, r28
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 aee:	5e ef       	ldi	r21, 0xFE	; 254
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 af0:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 af4:	28 2f       	mov	r18, r24
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	c9 01       	movw	r24, r18
 afa:	85 70       	andi	r24, 0x05	; 5
 afc:	90 70       	andi	r25, 0x00	; 0
 afe:	89 2b       	or	r24, r25
 b00:	b9 f3       	breq	.-18     	; 0xaf0 <__vector_11+0x24e>
					if (i & (1<<RXOUTI)) return;	// abort
 b02:	22 fd       	sbrc	r18, 2
 b04:	16 c0       	rjmp	.+44     	; 0xb32 <__stack+0x33>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 b06:	94 2f       	mov	r25, r20
 b08:	41 32       	cpi	r20, 0x21	; 33
 b0a:	08 f0       	brcs	.+2      	; 0xb0e <__stack+0xf>
 b0c:	90 e2       	ldi	r25, 0x20	; 32
 b0e:	89 2f       	mov	r24, r25
 b10:	03 c0       	rjmp	.+6      	; 0xb18 <__stack+0x19>
					for (i = n; i; i--) {
						UEDATX = 0;
 b12:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 b16:	81 50       	subi	r24, 0x01	; 1
 b18:	88 23       	and	r24, r24
 b1a:	d9 f7       	brne	.-10     	; 0xb12 <__stack+0x13>
						UEDATX = 0;
					}
					len -= n;
 b1c:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 b1e:	50 93 e8 00 	sts	0x00E8, r21
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 b22:	44 23       	and	r20, r20
 b24:	29 f7       	brne	.-54     	; 0xaf0 <__vector_11+0x24e>
 b26:	90 32       	cpi	r25, 0x20	; 32
 b28:	19 f3       	breq	.-58     	; 0xaf0 <__vector_11+0x24e>
 b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__stack+0x33>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 b2c:	81 e2       	ldi	r24, 0x21	; 33
 b2e:	80 93 eb 00 	sts	0x00EB, r24
}
 b32:	ff 91       	pop	r31
 b34:	ef 91       	pop	r30
 b36:	df 91       	pop	r29
 b38:	cf 91       	pop	r28
 b3a:	bf 91       	pop	r27
 b3c:	af 91       	pop	r26
 b3e:	9f 91       	pop	r25
 b40:	8f 91       	pop	r24
 b42:	7f 91       	pop	r23
 b44:	6f 91       	pop	r22
 b46:	5f 91       	pop	r21
 b48:	4f 91       	pop	r20
 b4a:	3f 91       	pop	r19
 b4c:	2f 91       	pop	r18
 b4e:	0f 90       	pop	r0
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	0f 90       	pop	r0
 b54:	1f 90       	pop	r1
 b56:	18 95       	reti

00000b58 <phex1>:
		usb_debug_putchar(c);
	}
}

void phex1(unsigned char c)
{
 b58:	98 2f       	mov	r25, r24
	usb_debug_putchar(c + ((c < 10) ? '0' : 'A' - 10));
 b5a:	8a 30       	cpi	r24, 0x0A	; 10
 b5c:	10 f0       	brcs	.+4      	; 0xb62 <phex1+0xa>
 b5e:	87 e3       	ldi	r24, 0x37	; 55
 b60:	01 c0       	rjmp	.+2      	; 0xb64 <phex1+0xc>
 b62:	80 e3       	ldi	r24, 0x30	; 48
 b64:	89 0f       	add	r24, r25
}
 b66:	17 ce       	rjmp	.-978    	; 0x796 <usb_debug_putchar>

00000b68 <phex>:

void phex(unsigned char c)
{
 b68:	1f 93       	push	r17
 b6a:	18 2f       	mov	r17, r24
	phex1(c >> 4);
 b6c:	82 95       	swap	r24
 b6e:	8f 70       	andi	r24, 0x0F	; 15
 b70:	f3 df       	rcall	.-26     	; 0xb58 <phex1>
	phex1(c & 15);
 b72:	81 2f       	mov	r24, r17
 b74:	8f 70       	andi	r24, 0x0F	; 15
 b76:	f0 df       	rcall	.-32     	; 0xb58 <phex1>
}
 b78:	1f 91       	pop	r17
 b7a:	08 95       	ret

00000b7c <phex16>:

void phex16(unsigned int i)
{
 b7c:	1f 93       	push	r17
 b7e:	18 2f       	mov	r17, r24
	phex(i >> 8);
 b80:	89 2f       	mov	r24, r25
 b82:	f2 df       	rcall	.-28     	; 0xb68 <phex>
	phex(i);
 b84:	81 2f       	mov	r24, r17
 b86:	f0 df       	rcall	.-32     	; 0xb68 <phex>
}
 b88:	1f 91       	pop	r17
 b8a:	08 95       	ret

00000b8c <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	ec 01       	movw	r28, r24
 b94:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 b96:	21 96       	adiw	r28, 0x01	; 1
 b98:	14 91       	lpm	r17, Z+
		if (!c) break;
 b9a:	11 23       	and	r17, r17
 b9c:	39 f0       	breq	.+14     	; 0xbac <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 b9e:	1a 30       	cpi	r17, 0x0A	; 10
 ba0:	11 f4       	brne	.+4      	; 0xba6 <print_P+0x1a>
 ba2:	8d e0       	ldi	r24, 0x0D	; 13
 ba4:	f8 dd       	rcall	.-1040   	; 0x796 <usb_debug_putchar>
		usb_debug_putchar(c);
 ba6:	81 2f       	mov	r24, r17
 ba8:	f6 dd       	rcall	.-1044   	; 0x796 <usb_debug_putchar>
 baa:	f4 cf       	rjmp	.-24     	; 0xb94 <print_P+0x8>
	}
}
 bac:	df 91       	pop	r29
 bae:	cf 91       	pop	r28
 bb0:	1f 91       	pop	r17
 bb2:	08 95       	ret

00000bb4 <__divsf3>:
 bb4:	0c d0       	rcall	.+24     	; 0xbce <__divsf3x>
 bb6:	eb c0       	rjmp	.+470    	; 0xd8e <__fp_round>
 bb8:	e3 d0       	rcall	.+454    	; 0xd80 <__fp_pscB>
 bba:	40 f0       	brcs	.+16     	; 0xbcc <__divsf3+0x18>
 bbc:	da d0       	rcall	.+436    	; 0xd72 <__fp_pscA>
 bbe:	30 f0       	brcs	.+12     	; 0xbcc <__divsf3+0x18>
 bc0:	21 f4       	brne	.+8      	; 0xbca <__divsf3+0x16>
 bc2:	5f 3f       	cpi	r21, 0xFF	; 255
 bc4:	19 f0       	breq	.+6      	; 0xbcc <__divsf3+0x18>
 bc6:	cc c0       	rjmp	.+408    	; 0xd60 <__fp_inf>
 bc8:	51 11       	cpse	r21, r1
 bca:	15 c1       	rjmp	.+554    	; 0xdf6 <__fp_szero>
 bcc:	cf c0       	rjmp	.+414    	; 0xd6c <__fp_nan>

00000bce <__divsf3x>:
 bce:	f0 d0       	rcall	.+480    	; 0xdb0 <__fp_split3>
 bd0:	98 f3       	brcs	.-26     	; 0xbb8 <__divsf3+0x4>

00000bd2 <__divsf3_pse>:
 bd2:	99 23       	and	r25, r25
 bd4:	c9 f3       	breq	.-14     	; 0xbc8 <__divsf3+0x14>
 bd6:	55 23       	and	r21, r21
 bd8:	b1 f3       	breq	.-20     	; 0xbc6 <__divsf3+0x12>
 bda:	95 1b       	sub	r25, r21
 bdc:	55 0b       	sbc	r21, r21
 bde:	bb 27       	eor	r27, r27
 be0:	aa 27       	eor	r26, r26
 be2:	62 17       	cp	r22, r18
 be4:	73 07       	cpc	r23, r19
 be6:	84 07       	cpc	r24, r20
 be8:	38 f0       	brcs	.+14     	; 0xbf8 <__divsf3_pse+0x26>
 bea:	9f 5f       	subi	r25, 0xFF	; 255
 bec:	5f 4f       	sbci	r21, 0xFF	; 255
 bee:	22 0f       	add	r18, r18
 bf0:	33 1f       	adc	r19, r19
 bf2:	44 1f       	adc	r20, r20
 bf4:	aa 1f       	adc	r26, r26
 bf6:	a9 f3       	breq	.-22     	; 0xbe2 <__divsf3_pse+0x10>
 bf8:	33 d0       	rcall	.+102    	; 0xc60 <__divsf3_pse+0x8e>
 bfa:	0e 2e       	mov	r0, r30
 bfc:	3a f0       	brmi	.+14     	; 0xc0c <__divsf3_pse+0x3a>
 bfe:	e0 e8       	ldi	r30, 0x80	; 128
 c00:	30 d0       	rcall	.+96     	; 0xc62 <__divsf3_pse+0x90>
 c02:	91 50       	subi	r25, 0x01	; 1
 c04:	50 40       	sbci	r21, 0x00	; 0
 c06:	e6 95       	lsr	r30
 c08:	00 1c       	adc	r0, r0
 c0a:	ca f7       	brpl	.-14     	; 0xbfe <__divsf3_pse+0x2c>
 c0c:	29 d0       	rcall	.+82     	; 0xc60 <__divsf3_pse+0x8e>
 c0e:	fe 2f       	mov	r31, r30
 c10:	27 d0       	rcall	.+78     	; 0xc60 <__divsf3_pse+0x8e>
 c12:	66 0f       	add	r22, r22
 c14:	77 1f       	adc	r23, r23
 c16:	88 1f       	adc	r24, r24
 c18:	bb 1f       	adc	r27, r27
 c1a:	26 17       	cp	r18, r22
 c1c:	37 07       	cpc	r19, r23
 c1e:	48 07       	cpc	r20, r24
 c20:	ab 07       	cpc	r26, r27
 c22:	b0 e8       	ldi	r27, 0x80	; 128
 c24:	09 f0       	breq	.+2      	; 0xc28 <__divsf3_pse+0x56>
 c26:	bb 0b       	sbc	r27, r27
 c28:	80 2d       	mov	r24, r0
 c2a:	bf 01       	movw	r22, r30
 c2c:	ff 27       	eor	r31, r31
 c2e:	93 58       	subi	r25, 0x83	; 131
 c30:	5f 4f       	sbci	r21, 0xFF	; 255
 c32:	2a f0       	brmi	.+10     	; 0xc3e <__divsf3_pse+0x6c>
 c34:	9e 3f       	cpi	r25, 0xFE	; 254
 c36:	51 05       	cpc	r21, r1
 c38:	68 f0       	brcs	.+26     	; 0xc54 <__divsf3_pse+0x82>
 c3a:	92 c0       	rjmp	.+292    	; 0xd60 <__fp_inf>
 c3c:	dc c0       	rjmp	.+440    	; 0xdf6 <__fp_szero>
 c3e:	5f 3f       	cpi	r21, 0xFF	; 255
 c40:	ec f3       	brlt	.-6      	; 0xc3c <__divsf3_pse+0x6a>
 c42:	98 3e       	cpi	r25, 0xE8	; 232
 c44:	dc f3       	brlt	.-10     	; 0xc3c <__divsf3_pse+0x6a>
 c46:	86 95       	lsr	r24
 c48:	77 95       	ror	r23
 c4a:	67 95       	ror	r22
 c4c:	b7 95       	ror	r27
 c4e:	f7 95       	ror	r31
 c50:	9f 5f       	subi	r25, 0xFF	; 255
 c52:	c9 f7       	brne	.-14     	; 0xc46 <__divsf3_pse+0x74>
 c54:	88 0f       	add	r24, r24
 c56:	91 1d       	adc	r25, r1
 c58:	96 95       	lsr	r25
 c5a:	87 95       	ror	r24
 c5c:	97 f9       	bld	r25, 7
 c5e:	08 95       	ret
 c60:	e1 e0       	ldi	r30, 0x01	; 1
 c62:	66 0f       	add	r22, r22
 c64:	77 1f       	adc	r23, r23
 c66:	88 1f       	adc	r24, r24
 c68:	bb 1f       	adc	r27, r27
 c6a:	62 17       	cp	r22, r18
 c6c:	73 07       	cpc	r23, r19
 c6e:	84 07       	cpc	r24, r20
 c70:	ba 07       	cpc	r27, r26
 c72:	20 f0       	brcs	.+8      	; 0xc7c <__divsf3_pse+0xaa>
 c74:	62 1b       	sub	r22, r18
 c76:	73 0b       	sbc	r23, r19
 c78:	84 0b       	sbc	r24, r20
 c7a:	ba 0b       	sbc	r27, r26
 c7c:	ee 1f       	adc	r30, r30
 c7e:	88 f7       	brcc	.-30     	; 0xc62 <__divsf3_pse+0x90>
 c80:	e0 95       	com	r30
 c82:	08 95       	ret

00000c84 <__fixsfsi>:
 c84:	04 d0       	rcall	.+8      	; 0xc8e <__fixunssfsi>
 c86:	68 94       	set
 c88:	b1 11       	cpse	r27, r1
 c8a:	b5 c0       	rjmp	.+362    	; 0xdf6 <__fp_szero>
 c8c:	08 95       	ret

00000c8e <__fixunssfsi>:
 c8e:	98 d0       	rcall	.+304    	; 0xdc0 <__fp_splitA>
 c90:	88 f0       	brcs	.+34     	; 0xcb4 <__fixunssfsi+0x26>
 c92:	9f 57       	subi	r25, 0x7F	; 127
 c94:	90 f0       	brcs	.+36     	; 0xcba <__fixunssfsi+0x2c>
 c96:	b9 2f       	mov	r27, r25
 c98:	99 27       	eor	r25, r25
 c9a:	b7 51       	subi	r27, 0x17	; 23
 c9c:	a0 f0       	brcs	.+40     	; 0xcc6 <__fixunssfsi+0x38>
 c9e:	d1 f0       	breq	.+52     	; 0xcd4 <__fixunssfsi+0x46>
 ca0:	66 0f       	add	r22, r22
 ca2:	77 1f       	adc	r23, r23
 ca4:	88 1f       	adc	r24, r24
 ca6:	99 1f       	adc	r25, r25
 ca8:	1a f0       	brmi	.+6      	; 0xcb0 <__fixunssfsi+0x22>
 caa:	ba 95       	dec	r27
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__fixunssfsi+0x12>
 cae:	12 c0       	rjmp	.+36     	; 0xcd4 <__fixunssfsi+0x46>
 cb0:	b1 30       	cpi	r27, 0x01	; 1
 cb2:	81 f0       	breq	.+32     	; 0xcd4 <__fixunssfsi+0x46>
 cb4:	9f d0       	rcall	.+318    	; 0xdf4 <__fp_zero>
 cb6:	b1 e0       	ldi	r27, 0x01	; 1
 cb8:	08 95       	ret
 cba:	9c c0       	rjmp	.+312    	; 0xdf4 <__fp_zero>
 cbc:	67 2f       	mov	r22, r23
 cbe:	78 2f       	mov	r23, r24
 cc0:	88 27       	eor	r24, r24
 cc2:	b8 5f       	subi	r27, 0xF8	; 248
 cc4:	39 f0       	breq	.+14     	; 0xcd4 <__fixunssfsi+0x46>
 cc6:	b9 3f       	cpi	r27, 0xF9	; 249
 cc8:	cc f3       	brlt	.-14     	; 0xcbc <__fixunssfsi+0x2e>
 cca:	86 95       	lsr	r24
 ccc:	77 95       	ror	r23
 cce:	67 95       	ror	r22
 cd0:	b3 95       	inc	r27
 cd2:	d9 f7       	brne	.-10     	; 0xcca <__fixunssfsi+0x3c>
 cd4:	3e f4       	brtc	.+14     	; 0xce4 <__fixunssfsi+0x56>
 cd6:	90 95       	com	r25
 cd8:	80 95       	com	r24
 cda:	70 95       	com	r23
 cdc:	61 95       	neg	r22
 cde:	7f 4f       	sbci	r23, 0xFF	; 255
 ce0:	8f 4f       	sbci	r24, 0xFF	; 255
 ce2:	9f 4f       	sbci	r25, 0xFF	; 255
 ce4:	08 95       	ret

00000ce6 <__floatunsisf>:
 ce6:	e8 94       	clt
 ce8:	09 c0       	rjmp	.+18     	; 0xcfc <__floatsisf+0x12>

00000cea <__floatsisf>:
 cea:	97 fb       	bst	r25, 7
 cec:	3e f4       	brtc	.+14     	; 0xcfc <__floatsisf+0x12>
 cee:	90 95       	com	r25
 cf0:	80 95       	com	r24
 cf2:	70 95       	com	r23
 cf4:	61 95       	neg	r22
 cf6:	7f 4f       	sbci	r23, 0xFF	; 255
 cf8:	8f 4f       	sbci	r24, 0xFF	; 255
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	99 23       	and	r25, r25
 cfe:	a9 f0       	breq	.+42     	; 0xd2a <__floatsisf+0x40>
 d00:	f9 2f       	mov	r31, r25
 d02:	96 e9       	ldi	r25, 0x96	; 150
 d04:	bb 27       	eor	r27, r27
 d06:	93 95       	inc	r25
 d08:	f6 95       	lsr	r31
 d0a:	87 95       	ror	r24
 d0c:	77 95       	ror	r23
 d0e:	67 95       	ror	r22
 d10:	b7 95       	ror	r27
 d12:	f1 11       	cpse	r31, r1
 d14:	f8 cf       	rjmp	.-16     	; 0xd06 <__floatsisf+0x1c>
 d16:	fa f4       	brpl	.+62     	; 0xd56 <__floatsisf+0x6c>
 d18:	bb 0f       	add	r27, r27
 d1a:	11 f4       	brne	.+4      	; 0xd20 <__floatsisf+0x36>
 d1c:	60 ff       	sbrs	r22, 0
 d1e:	1b c0       	rjmp	.+54     	; 0xd56 <__floatsisf+0x6c>
 d20:	6f 5f       	subi	r22, 0xFF	; 255
 d22:	7f 4f       	sbci	r23, 0xFF	; 255
 d24:	8f 4f       	sbci	r24, 0xFF	; 255
 d26:	9f 4f       	sbci	r25, 0xFF	; 255
 d28:	16 c0       	rjmp	.+44     	; 0xd56 <__floatsisf+0x6c>
 d2a:	88 23       	and	r24, r24
 d2c:	11 f0       	breq	.+4      	; 0xd32 <__floatsisf+0x48>
 d2e:	96 e9       	ldi	r25, 0x96	; 150
 d30:	11 c0       	rjmp	.+34     	; 0xd54 <__floatsisf+0x6a>
 d32:	77 23       	and	r23, r23
 d34:	21 f0       	breq	.+8      	; 0xd3e <__floatsisf+0x54>
 d36:	9e e8       	ldi	r25, 0x8E	; 142
 d38:	87 2f       	mov	r24, r23
 d3a:	76 2f       	mov	r23, r22
 d3c:	05 c0       	rjmp	.+10     	; 0xd48 <__floatsisf+0x5e>
 d3e:	66 23       	and	r22, r22
 d40:	71 f0       	breq	.+28     	; 0xd5e <__floatsisf+0x74>
 d42:	96 e8       	ldi	r25, 0x86	; 134
 d44:	86 2f       	mov	r24, r22
 d46:	70 e0       	ldi	r23, 0x00	; 0
 d48:	60 e0       	ldi	r22, 0x00	; 0
 d4a:	2a f0       	brmi	.+10     	; 0xd56 <__floatsisf+0x6c>
 d4c:	9a 95       	dec	r25
 d4e:	66 0f       	add	r22, r22
 d50:	77 1f       	adc	r23, r23
 d52:	88 1f       	adc	r24, r24
 d54:	da f7       	brpl	.-10     	; 0xd4c <__floatsisf+0x62>
 d56:	88 0f       	add	r24, r24
 d58:	96 95       	lsr	r25
 d5a:	87 95       	ror	r24
 d5c:	97 f9       	bld	r25, 7
 d5e:	08 95       	ret

00000d60 <__fp_inf>:
 d60:	97 f9       	bld	r25, 7
 d62:	9f 67       	ori	r25, 0x7F	; 127
 d64:	80 e8       	ldi	r24, 0x80	; 128
 d66:	70 e0       	ldi	r23, 0x00	; 0
 d68:	60 e0       	ldi	r22, 0x00	; 0
 d6a:	08 95       	ret

00000d6c <__fp_nan>:
 d6c:	9f ef       	ldi	r25, 0xFF	; 255
 d6e:	80 ec       	ldi	r24, 0xC0	; 192
 d70:	08 95       	ret

00000d72 <__fp_pscA>:
 d72:	00 24       	eor	r0, r0
 d74:	0a 94       	dec	r0
 d76:	16 16       	cp	r1, r22
 d78:	17 06       	cpc	r1, r23
 d7a:	18 06       	cpc	r1, r24
 d7c:	09 06       	cpc	r0, r25
 d7e:	08 95       	ret

00000d80 <__fp_pscB>:
 d80:	00 24       	eor	r0, r0
 d82:	0a 94       	dec	r0
 d84:	12 16       	cp	r1, r18
 d86:	13 06       	cpc	r1, r19
 d88:	14 06       	cpc	r1, r20
 d8a:	05 06       	cpc	r0, r21
 d8c:	08 95       	ret

00000d8e <__fp_round>:
 d8e:	09 2e       	mov	r0, r25
 d90:	03 94       	inc	r0
 d92:	00 0c       	add	r0, r0
 d94:	11 f4       	brne	.+4      	; 0xd9a <__fp_round+0xc>
 d96:	88 23       	and	r24, r24
 d98:	52 f0       	brmi	.+20     	; 0xdae <__fp_round+0x20>
 d9a:	bb 0f       	add	r27, r27
 d9c:	40 f4       	brcc	.+16     	; 0xdae <__fp_round+0x20>
 d9e:	bf 2b       	or	r27, r31
 da0:	11 f4       	brne	.+4      	; 0xda6 <__fp_round+0x18>
 da2:	60 ff       	sbrs	r22, 0
 da4:	04 c0       	rjmp	.+8      	; 0xdae <__fp_round+0x20>
 da6:	6f 5f       	subi	r22, 0xFF	; 255
 da8:	7f 4f       	sbci	r23, 0xFF	; 255
 daa:	8f 4f       	sbci	r24, 0xFF	; 255
 dac:	9f 4f       	sbci	r25, 0xFF	; 255
 dae:	08 95       	ret

00000db0 <__fp_split3>:
 db0:	57 fd       	sbrc	r21, 7
 db2:	90 58       	subi	r25, 0x80	; 128
 db4:	44 0f       	add	r20, r20
 db6:	55 1f       	adc	r21, r21
 db8:	59 f0       	breq	.+22     	; 0xdd0 <__fp_splitA+0x10>
 dba:	5f 3f       	cpi	r21, 0xFF	; 255
 dbc:	71 f0       	breq	.+28     	; 0xdda <__fp_splitA+0x1a>
 dbe:	47 95       	ror	r20

00000dc0 <__fp_splitA>:
 dc0:	88 0f       	add	r24, r24
 dc2:	97 fb       	bst	r25, 7
 dc4:	99 1f       	adc	r25, r25
 dc6:	61 f0       	breq	.+24     	; 0xde0 <__fp_splitA+0x20>
 dc8:	9f 3f       	cpi	r25, 0xFF	; 255
 dca:	79 f0       	breq	.+30     	; 0xdea <__fp_splitA+0x2a>
 dcc:	87 95       	ror	r24
 dce:	08 95       	ret
 dd0:	12 16       	cp	r1, r18
 dd2:	13 06       	cpc	r1, r19
 dd4:	14 06       	cpc	r1, r20
 dd6:	55 1f       	adc	r21, r21
 dd8:	f2 cf       	rjmp	.-28     	; 0xdbe <__fp_split3+0xe>
 dda:	46 95       	lsr	r20
 ddc:	f1 df       	rcall	.-30     	; 0xdc0 <__fp_splitA>
 dde:	08 c0       	rjmp	.+16     	; 0xdf0 <__fp_splitA+0x30>
 de0:	16 16       	cp	r1, r22
 de2:	17 06       	cpc	r1, r23
 de4:	18 06       	cpc	r1, r24
 de6:	99 1f       	adc	r25, r25
 de8:	f1 cf       	rjmp	.-30     	; 0xdcc <__fp_splitA+0xc>
 dea:	86 95       	lsr	r24
 dec:	71 05       	cpc	r23, r1
 dee:	61 05       	cpc	r22, r1
 df0:	08 94       	sec
 df2:	08 95       	ret

00000df4 <__fp_zero>:
 df4:	e8 94       	clt

00000df6 <__fp_szero>:
 df6:	bb 27       	eor	r27, r27
 df8:	66 27       	eor	r22, r22
 dfa:	77 27       	eor	r23, r23
 dfc:	cb 01       	movw	r24, r22
 dfe:	97 f9       	bld	r25, 7
 e00:	08 95       	ret

00000e02 <__mulsf3>:
 e02:	0b d0       	rcall	.+22     	; 0xe1a <__mulsf3x>
 e04:	c4 cf       	rjmp	.-120    	; 0xd8e <__fp_round>
 e06:	b5 df       	rcall	.-150    	; 0xd72 <__fp_pscA>
 e08:	28 f0       	brcs	.+10     	; 0xe14 <__mulsf3+0x12>
 e0a:	ba df       	rcall	.-140    	; 0xd80 <__fp_pscB>
 e0c:	18 f0       	brcs	.+6      	; 0xe14 <__mulsf3+0x12>
 e0e:	95 23       	and	r25, r21
 e10:	09 f0       	breq	.+2      	; 0xe14 <__mulsf3+0x12>
 e12:	a6 cf       	rjmp	.-180    	; 0xd60 <__fp_inf>
 e14:	ab cf       	rjmp	.-170    	; 0xd6c <__fp_nan>
 e16:	11 24       	eor	r1, r1
 e18:	ee cf       	rjmp	.-36     	; 0xdf6 <__fp_szero>

00000e1a <__mulsf3x>:
 e1a:	ca df       	rcall	.-108    	; 0xdb0 <__fp_split3>
 e1c:	a0 f3       	brcs	.-24     	; 0xe06 <__mulsf3+0x4>

00000e1e <__mulsf3_pse>:
 e1e:	95 9f       	mul	r25, r21
 e20:	d1 f3       	breq	.-12     	; 0xe16 <__mulsf3+0x14>
 e22:	95 0f       	add	r25, r21
 e24:	50 e0       	ldi	r21, 0x00	; 0
 e26:	55 1f       	adc	r21, r21
 e28:	62 9f       	mul	r22, r18
 e2a:	f0 01       	movw	r30, r0
 e2c:	72 9f       	mul	r23, r18
 e2e:	bb 27       	eor	r27, r27
 e30:	f0 0d       	add	r31, r0
 e32:	b1 1d       	adc	r27, r1
 e34:	63 9f       	mul	r22, r19
 e36:	aa 27       	eor	r26, r26
 e38:	f0 0d       	add	r31, r0
 e3a:	b1 1d       	adc	r27, r1
 e3c:	aa 1f       	adc	r26, r26
 e3e:	64 9f       	mul	r22, r20
 e40:	66 27       	eor	r22, r22
 e42:	b0 0d       	add	r27, r0
 e44:	a1 1d       	adc	r26, r1
 e46:	66 1f       	adc	r22, r22
 e48:	82 9f       	mul	r24, r18
 e4a:	22 27       	eor	r18, r18
 e4c:	b0 0d       	add	r27, r0
 e4e:	a1 1d       	adc	r26, r1
 e50:	62 1f       	adc	r22, r18
 e52:	73 9f       	mul	r23, r19
 e54:	b0 0d       	add	r27, r0
 e56:	a1 1d       	adc	r26, r1
 e58:	62 1f       	adc	r22, r18
 e5a:	83 9f       	mul	r24, r19
 e5c:	a0 0d       	add	r26, r0
 e5e:	61 1d       	adc	r22, r1
 e60:	22 1f       	adc	r18, r18
 e62:	74 9f       	mul	r23, r20
 e64:	33 27       	eor	r19, r19
 e66:	a0 0d       	add	r26, r0
 e68:	61 1d       	adc	r22, r1
 e6a:	23 1f       	adc	r18, r19
 e6c:	84 9f       	mul	r24, r20
 e6e:	60 0d       	add	r22, r0
 e70:	21 1d       	adc	r18, r1
 e72:	82 2f       	mov	r24, r18
 e74:	76 2f       	mov	r23, r22
 e76:	6a 2f       	mov	r22, r26
 e78:	11 24       	eor	r1, r1
 e7a:	9f 57       	subi	r25, 0x7F	; 127
 e7c:	50 40       	sbci	r21, 0x00	; 0
 e7e:	8a f0       	brmi	.+34     	; 0xea2 <__mulsf3_pse+0x84>
 e80:	e1 f0       	breq	.+56     	; 0xeba <__mulsf3_pse+0x9c>
 e82:	88 23       	and	r24, r24
 e84:	4a f0       	brmi	.+18     	; 0xe98 <__mulsf3_pse+0x7a>
 e86:	ee 0f       	add	r30, r30
 e88:	ff 1f       	adc	r31, r31
 e8a:	bb 1f       	adc	r27, r27
 e8c:	66 1f       	adc	r22, r22
 e8e:	77 1f       	adc	r23, r23
 e90:	88 1f       	adc	r24, r24
 e92:	91 50       	subi	r25, 0x01	; 1
 e94:	50 40       	sbci	r21, 0x00	; 0
 e96:	a9 f7       	brne	.-22     	; 0xe82 <__mulsf3_pse+0x64>
 e98:	9e 3f       	cpi	r25, 0xFE	; 254
 e9a:	51 05       	cpc	r21, r1
 e9c:	70 f0       	brcs	.+28     	; 0xeba <__mulsf3_pse+0x9c>
 e9e:	60 cf       	rjmp	.-320    	; 0xd60 <__fp_inf>
 ea0:	aa cf       	rjmp	.-172    	; 0xdf6 <__fp_szero>
 ea2:	5f 3f       	cpi	r21, 0xFF	; 255
 ea4:	ec f3       	brlt	.-6      	; 0xea0 <__mulsf3_pse+0x82>
 ea6:	98 3e       	cpi	r25, 0xE8	; 232
 ea8:	dc f3       	brlt	.-10     	; 0xea0 <__mulsf3_pse+0x82>
 eaa:	86 95       	lsr	r24
 eac:	77 95       	ror	r23
 eae:	67 95       	ror	r22
 eb0:	b7 95       	ror	r27
 eb2:	f7 95       	ror	r31
 eb4:	e7 95       	ror	r30
 eb6:	9f 5f       	subi	r25, 0xFF	; 255
 eb8:	c1 f7       	brne	.-16     	; 0xeaa <__mulsf3_pse+0x8c>
 eba:	fe 2b       	or	r31, r30
 ebc:	88 0f       	add	r24, r24
 ebe:	91 1d       	adc	r25, r1
 ec0:	96 95       	lsr	r25
 ec2:	87 95       	ror	r24
 ec4:	97 f9       	bld	r25, 7
 ec6:	08 95       	ret

00000ec8 <__divmodsi4>:
 ec8:	97 fb       	bst	r25, 7
 eca:	09 2e       	mov	r0, r25
 ecc:	05 26       	eor	r0, r21
 ece:	0e d0       	rcall	.+28     	; 0xeec <__divmodsi4_neg1>
 ed0:	57 fd       	sbrc	r21, 7
 ed2:	04 d0       	rcall	.+8      	; 0xedc <__divmodsi4_neg2>
 ed4:	14 d0       	rcall	.+40     	; 0xefe <__udivmodsi4>
 ed6:	0a d0       	rcall	.+20     	; 0xeec <__divmodsi4_neg1>
 ed8:	00 1c       	adc	r0, r0
 eda:	38 f4       	brcc	.+14     	; 0xeea <__divmodsi4_exit>

00000edc <__divmodsi4_neg2>:
 edc:	50 95       	com	r21
 ede:	40 95       	com	r20
 ee0:	30 95       	com	r19
 ee2:	21 95       	neg	r18
 ee4:	3f 4f       	sbci	r19, 0xFF	; 255
 ee6:	4f 4f       	sbci	r20, 0xFF	; 255
 ee8:	5f 4f       	sbci	r21, 0xFF	; 255

00000eea <__divmodsi4_exit>:
 eea:	08 95       	ret

00000eec <__divmodsi4_neg1>:
 eec:	f6 f7       	brtc	.-4      	; 0xeea <__divmodsi4_exit>
 eee:	90 95       	com	r25
 ef0:	80 95       	com	r24
 ef2:	70 95       	com	r23
 ef4:	61 95       	neg	r22
 ef6:	7f 4f       	sbci	r23, 0xFF	; 255
 ef8:	8f 4f       	sbci	r24, 0xFF	; 255
 efa:	9f 4f       	sbci	r25, 0xFF	; 255
 efc:	08 95       	ret

00000efe <__udivmodsi4>:
 efe:	a1 e2       	ldi	r26, 0x21	; 33
 f00:	1a 2e       	mov	r1, r26
 f02:	aa 1b       	sub	r26, r26
 f04:	bb 1b       	sub	r27, r27
 f06:	fd 01       	movw	r30, r26
 f08:	0d c0       	rjmp	.+26     	; 0xf24 <__udivmodsi4_ep>

00000f0a <__udivmodsi4_loop>:
 f0a:	aa 1f       	adc	r26, r26
 f0c:	bb 1f       	adc	r27, r27
 f0e:	ee 1f       	adc	r30, r30
 f10:	ff 1f       	adc	r31, r31
 f12:	a2 17       	cp	r26, r18
 f14:	b3 07       	cpc	r27, r19
 f16:	e4 07       	cpc	r30, r20
 f18:	f5 07       	cpc	r31, r21
 f1a:	20 f0       	brcs	.+8      	; 0xf24 <__udivmodsi4_ep>
 f1c:	a2 1b       	sub	r26, r18
 f1e:	b3 0b       	sbc	r27, r19
 f20:	e4 0b       	sbc	r30, r20
 f22:	f5 0b       	sbc	r31, r21

00000f24 <__udivmodsi4_ep>:
 f24:	66 1f       	adc	r22, r22
 f26:	77 1f       	adc	r23, r23
 f28:	88 1f       	adc	r24, r24
 f2a:	99 1f       	adc	r25, r25
 f2c:	1a 94       	dec	r1
 f2e:	69 f7       	brne	.-38     	; 0xf0a <__udivmodsi4_loop>
 f30:	60 95       	com	r22
 f32:	70 95       	com	r23
 f34:	80 95       	com	r24
 f36:	90 95       	com	r25
 f38:	9b 01       	movw	r18, r22
 f3a:	ac 01       	movw	r20, r24
 f3c:	bd 01       	movw	r22, r26
 f3e:	cf 01       	movw	r24, r30
 f40:	08 95       	ret

00000f42 <_exit>:
 f42:	f8 94       	cli

00000f44 <__stop_program>:
 f44:	ff cf       	rjmp	.-2      	; 0xf44 <__stop_program>
